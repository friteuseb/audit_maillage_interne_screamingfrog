#!/usr/bin/env python3
"""
Script de validation de la configuration du projet d'audit de maillage interne
V√©rifie la coh√©rence des fichiers, d√©pendances et configuration
"""

import os
import json
import sys
from pathlib import Path

def check_files():
    """V√©rifie la pr√©sence des fichiers essentiels"""
    required_files = [
        '01_workflow_audit_ia_complet.py',
        'ext_audit_maillage_classique.py',
        'ext_analyse_csv_simple.py',
        'ext_detecteur_contenu_ia.py',
        'ext_analyseur_anthropic.py',
        'ext_analyseur_semantique.py',
        'ext_configuration_audit.json',
        'ext_config_screaming_frog.xml',
        '.env.example',
        'README.md'
    ]

    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    return missing_files

def check_config():
    """V√©rifie la validit√© du fichier de configuration"""
    config_file = 'ext_configuration_audit.json'
    if not os.path.exists(config_file):
        return False, "Fichier ext_configuration_audit.json manquant"

    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)

        required_keys = ['screaming_frog_path', 'export_path', 'analysis_thresholds']
        for key in required_keys:
            if key not in config:
                return False, f"Cl√© manquante dans la configuration: {key}"

        return True, "Configuration valide"
    except json.JSONDecodeError as e:
        return False, f"Erreur JSON dans ext_configuration_audit.json: {e}"
    except Exception as e:
        return False, f"Erreur lors de la lecture de la configuration: {e}"

def check_dependencies():
    """V√©rifie les d√©pendances Python"""
    dependencies_status = {}

    # D√©pendances de base
    try:
        import requests
        dependencies_status['requests'] = "‚úÖ Install√©"
    except ImportError:
        dependencies_status['requests'] = "‚ùå Manquant"

    try:
        from bs4 import BeautifulSoup
        dependencies_status['beautifulsoup4'] = "‚úÖ Install√©"
    except ImportError:
        dependencies_status['beautifulsoup4'] = "‚ùå Manquant"

    try:
        import anthropic
        dependencies_status['anthropic'] = "‚úÖ Install√©"
    except ImportError:
        dependencies_status['anthropic'] = "‚ùå Manquant (optionnel pour IA)"

    # D√©pendances ML
    try:
        from sentence_transformers import SentenceTransformer
        dependencies_status['sentence-transformers'] = "‚úÖ Install√©"
    except ImportError:
        dependencies_status['sentence-transformers'] = "‚ùå Manquant (optionnel pour analyse s√©mantique)"

    try:
        import sklearn
        dependencies_status['scikit-learn'] = "‚úÖ Install√©"
    except ImportError:
        dependencies_status['scikit-learn'] = "‚ùå Manquant (optionnel pour analyse s√©mantique)"

    return dependencies_status

def check_env_file():
    """V√©rifie la pr√©sence et le contenu du fichier .env"""
    if not os.path.exists('.env'):
        return "‚ö†Ô∏è Fichier .env manquant (copiez .env.example)"

    # V√©rifier si ANTHROPIC_API_KEY est d√©fini
    try:
        from dotenv import load_dotenv
        load_dotenv()
        api_key = os.getenv('ANTHROPIC_API_KEY')
        if api_key and len(api_key.strip()) > 10:
            return "‚úÖ .env configur√© avec cl√© API Anthropic"
        else:
            return "‚ö†Ô∏è Cl√© API Anthropic manquante ou invalide dans .env"
    except ImportError:
        return "‚ö†Ô∏è python-dotenv non install√©, impossible de v√©rifier .env"

def main():
    """Fonction principale de validation"""
    print("üîç VALIDATION DE LA CONFIGURATION DU PROJET")
    print("=" * 50)

    # V√©rification des fichiers
    print("\nüìÅ V√©rification des fichiers...")
    missing_files = check_files()
    if missing_files:
        print("‚ùå Fichiers manquants:")
        for file in missing_files:
            print(f"   - {file}")
    else:
        print("‚úÖ Tous les fichiers requis sont pr√©sents")

    # V√©rification de la configuration
    print("\n‚öôÔ∏è V√©rification de la configuration...")
    config_ok, config_msg = check_config()
    print(f"   {config_msg}")

    # V√©rification des d√©pendances
    print("\nüì¶ V√©rification des d√©pendances...")
    deps = check_dependencies()
    for dep, status in deps.items():
        print(f"   {dep}: {status}")

    # V√©rification du fichier .env
    print("\nüîë V√©rification de l'environnement...")
    env_status = check_env_file()
    print(f"   {env_status}")

    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â:")

    all_good = len(missing_files) == 0 and config_ok
    if all_good:
        print("‚úÖ Configuration valide - Pr√™t pour l'audit!")
        print("\nüöÄ Commandes disponibles:")
        print("   python 01_workflow_audit_ia_complet.py     # Audit IA complet")
        print("   python ext_audit_maillage_classique.py      # Audit classique")
        print("   python ext_analyse_csv_simple.py           # Analyse CSV rapide")
    else:
        print("‚ö†Ô∏è Configuration incompl√®te - Corrigez les probl√®mes ci-dessus")
        if missing_files:
            print(f"   ‚Ä¢ {len(missing_files)} fichier(s) manquant(s)")
        if not config_ok:
            print("   ‚Ä¢ Probl√®me de configuration")

    return 0 if all_good else 1

if __name__ == "__main__":
    sys.exit(main())